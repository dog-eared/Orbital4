package Orbital4;

import javafx.event.ActionEvent;
import javafx.scene.control.Button;

/**
 * Game Button. Extends the regular button class to make things a bit easier to
 * parse. GameButtons can be horizontal or vertical, move pieces nega-
 * tively or positively along the appropriate axis and have an index
 * respresenting their location in line.
 * 
 * @author Evan Mulrooney 000745477
 */
public class GameButton extends Button {

    /* Longer side of button */
    private final static int BUTTON_LONG_SIDE = 48;
    /* Shorter side of button */
    private final static int BUTTON_SHORT_SIDE = 24;
    
    /* Up/down or left/right axis */
    private final boolean horizontal;
    /* Up/left vs. down/right */
    private final boolean negative;
    
    /* x-location when horizontal, y-location when vertical */
    private final int index;
    
    /* current board */
    private static Board board;
    /* main game reference */
    private static Orbital4 o4;
    
    /**
     * Constructor. Takes horizontal/not horizontal, negative/not negative and
     * an index as parameters. 
     * @param horizontal if true, this button is on the left/right
     * @param negative if true, this button is on the bottom or right
     * @param index location of this button in line
     */
    public GameButton(boolean horizontal, boolean negative, int index) {
        
        this.horizontal = horizontal;
        this.index = index;
        this.negative = negative;
        
        //Set this button to call the right method
        this.setOnAction(this::placePiece);
        
        //Change shape based on horizontal or not
        if (horizontal) {
            this.setMinWidth(BUTTON_SHORT_SIDE);
            this.setMaxWidth(BUTTON_SHORT_SIDE);
            this.setMinHeight(BUTTON_LONG_SIDE);
            this.setMaxHeight(BUTTON_LONG_SIDE);  
        } else {
            this.setMinWidth(BUTTON_LONG_SIDE);
            this.setMaxWidth(BUTTON_LONG_SIDE);
            this.setMinHeight(BUTTON_SHORT_SIDE);
            this.setMaxHeight(BUTTON_SHORT_SIDE);
        }
     
    }
    
    
    /**
     * Attempts to place a piece based on location of this button.
     * @param e - ActionEvent generated by clicking on this button
     */
    private void placePiece(ActionEvent e) {
        
        //Get the first available spot based on this button's attributes
        //If no spot is available, location becomes -1...
        int location = board.checkForValidMove(horizontal, negative, index);
        
        //any positive value for location is workable
        if (location > -1) {
            
            
            if (horizontal) {
                //when horizontal, location is x axis, index is our y location
                board.setPiece(location, index);
                o4.drawPiece(location, index);
            } else {
                //when vertical, location is y axis, index is our x location
                board.setPiece(index, location);
                o4.drawPiece(index, location);
            }
            
            //Check for a win and update the score if found
            if (board.getGameWon()) {
                o4.showGameWon();
            }
            
        } else {
            //If location is invalid or no good space found:
            System.out.println("Can't place a piece.");
        }
        
        
    }
    
    /**
     * Sets the reference to the orbital4 class. Should only be called during
     * initialization. 
     * @param o4 
     */
    public void setGameReference(Orbital4 o4) {
        this.o4 = o4;
    }
    
    /**
     * Sets the current board affected by buttons as the one given as a parameter. 
     * @param board 
     */
    public void setBoard(Board board) {
        this.board = board;
    }
    
    
}
